#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
void del_space(char s[]);/*删空格*/ 
int *haha(char s[]);/*将字符数组变成非字符数组储存数字*/ 
void multi_div_pl_mi(int y[]); /*加减乘除运算*/
int main()
{
	int i = 0;
	char there[10001] = {0};
	gets(there);
	del_space(there);
	int *y;
	y = haha(there);
	multi_div_pl_mi(y);
	free(y);/*释放内存*/
	return 0;
}

void del_space(char s[])
{
	int i,j;
	char t[10001];
	memset(t,'\0',sizeof(t));
	strncpy(t, s, 10001);
for(i = 0, j = 0; t [i] != '\0' ; i++)
	{
		if(!isspace(t[i]))
		s[j++] = t[i];
	} 
	s[j] = '\0';
}

int *haha(char s[])
{
	int *y;
	y = (int *)malloc(sizeof(int) * 10000);/*分配动态内存*/
	int i = 0, j = 0, k = 0, d = 0, g = 0;
	for(i = 0; s[i] != '\0'; i++)
	{
		if(isdigit(s[i])) j+=1;/*关于两个运算符之间的计数器，记住数字位数*/
		else if(s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/' || s[i] == '=')
		{	y[d] = 0;
			for(k = 0, g = j; k < g; k++)
			{
				y[d] += (s[i-j] - '0') * pow(10,j-1);/*字符变整型*/
				j -= 1;
			}
			d += 1;
			if(s[i] == '+') y[d] = -1;/*标记加减乘除，数字均大于零区别*/
			else if(s[i] == '-') y[d] = -2;
			else if(s[i] == '*') y[d] = -3;
			else if(s[i] == '/') y[d] = -4;
			else y[d] = -5;
			d += 1;
		} 
	}
	return y;
}
void multi_div_pl_mi(int y[])
{
	int i;
	for(i = 0; y[i-1] != -5; i+=2)/*计算乘除结果，保留在进行运算的第二个数字上，整体完成时可直接看作加减运算*/ 
	{
			if(y[i+1] == -3)/*当前角标为i数字后的运算符为乘，下同*/
			{
				y[i+2] *= y[i];
				y[i] = 0;/*根据之前结果，改变进行运算的第二个数字为0，结果不变*/ 
				if(y[i-1] == -2)/*当前角标为i数字之前的运算符为减法，则其后的运算符也变成减法，将运算传递*/
				y[i+1] = -2;
				else y[i+1] = -1;
			}
			else if(y[i+1] == -4)/*上同*/
			{
				y[i+2] = y[i] / y[i+2];
				y[i] = 0;
				if(y[i-1] == -2)
				y[i+1] = -2;
				else y[i+1] = -1;
		}	
	}
	
	for(i = 0; y[i-1] != -5; i+=2)/*加减运算，每次+2*/
	{
			if(y[i+1] == -1) 
			{
				y[i+2] += y[i];
				y[i] = 0;
			}
			else if(y[i+1] == -2)
			{
				y[i+2] = y[i] - y[i+2];
				y[i] = 0;
				y[i+1] = -1;
			}
	}
	printf("%d\n",y[i-2]);
}
